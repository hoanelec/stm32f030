
2_TCS3200_Color_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002900  08002900  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002900  08002900  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002900  08002900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002914  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008649  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b5  00000000  00000000  0002867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00029d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ecb2  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ec4  00000000  00000000  00039af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b364  00000000  00000000  000439b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009ed1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa4  00000000  00000000  0009ed70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028b8 	.word	0x080028b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028b8 	.word	0x080028b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_TIM_IC_CaptureCallback>:
uint8_t firstEdge = 0;
uint8_t done = 0;
uint32_t channelx;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == htimx.Instance)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d152      	bne.n	80004ae <HAL_TIM_IC_CaptureCallback+0xba>
	{
		icValue = __HAL_TIM_GET_COMPARE(&htimx,channelx);
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d104      	bne.n	800041a <HAL_TIM_IC_CaptureCallback+0x26>
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000416:	b29b      	uxth	r3, r3
 8000418:	e015      	b.n	8000446 <HAL_TIM_IC_CaptureCallback+0x52>
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d104      	bne.n	800042c <HAL_TIM_IC_CaptureCallback+0x38>
 8000422:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000428:	b29b      	uxth	r3, r3
 800042a:	e00c      	b.n	8000446 <HAL_TIM_IC_CaptureCallback+0x52>
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b08      	cmp	r3, #8
 8000432:	d104      	bne.n	800043e <HAL_TIM_IC_CaptureCallback+0x4a>
 8000434:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800043a:	b29b      	uxth	r3, r3
 800043c:	e003      	b.n	8000446 <HAL_TIM_IC_CaptureCallback+0x52>
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000444:	b29b      	uxth	r3, r3
 8000446:	4a1e      	ldr	r2, [pc, #120]	; (80004c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000448:	8013      	strh	r3, [r2, #0]
			if(firstEdge ==0 )
 800044a:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10a      	bne.n	8000468 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				preIcValue = icValue;
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000454:	881a      	ldrh	r2, [r3, #0]
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000458:	801a      	strh	r2, [r3, #0]
				firstEdge++;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000464:	701a      	strb	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htimx, channelx);
			}
	}
	//	preIcValue = icValue;
	//1MHZ clock = > T xung => t us
}
 8000466:	e022      	b.n	80004ae <HAL_TIM_IC_CaptureCallback+0xba>
			else if(firstEdge == 1)
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d11e      	bne.n	80004ae <HAL_TIM_IC_CaptureCallback+0xba>
				T = icValue - preIcValue;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000472:	881a      	ldrh	r2, [r3, #0]
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <HAL_TIM_IC_CaptureCallback+0xd8>)
 800047e:	801a      	strh	r2, [r3, #0]
				f = 1000000/T;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	0019      	movs	r1, r3
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000488:	f7ff fec8 	bl	800021c <__divsi3>
 800048c:	0003      	movs	r3, r0
 800048e:	b29a      	uxth	r2, r3
 8000490:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000492:	801a      	strh	r2, [r3, #0]
				firstEdge = 0;
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
				done = 1;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htimx, channelx);
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fbf9 	bl	8001ca0 <HAL_TIM_IC_Stop_IT>
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000034 	.word	0x20000034
 80004bc:	2000007c 	.word	0x2000007c
 80004c0:	20000028 	.word	0x20000028
 80004c4:	20000030 	.word	0x20000030
 80004c8:	2000002a 	.word	0x2000002a
 80004cc:	2000002c 	.word	0x2000002c
 80004d0:	000f4240 	.word	0x000f4240
 80004d4:	2000002e 	.word	0x2000002e
 80004d8:	20000031 	.word	0x20000031

080004dc <tcs3200_getPulseFreq>:
uint32_t tcs3200_getPulseFreq(TIM_HandleTypeDef htim,uint32_t channel)
{
 80004dc:	b084      	sub	sp, #16
 80004de:	b5b0      	push	{r4, r5, r7, lr}
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	2510      	movs	r5, #16
 80004e4:	197c      	adds	r4, r7, r5
 80004e6:	6020      	str	r0, [r4, #0]
 80004e8:	6061      	str	r1, [r4, #4]
 80004ea:	60a2      	str	r2, [r4, #8]
 80004ec:	60e3      	str	r3, [r4, #12]
	htimx = htim;
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <tcs3200_getPulseFreq+0x4c>)
 80004f0:	197b      	adds	r3, r7, r5
 80004f2:	0010      	movs	r0, r2
 80004f4:	0019      	movs	r1, r3
 80004f6:	2348      	movs	r3, #72	; 0x48
 80004f8:	001a      	movs	r2, r3
 80004fa:	f002 f9cb 	bl	8002894 <memcpy>
	channelx = channel;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <tcs3200_getPulseFreq+0x50>)
 8000500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000502:	601a      	str	r2, [r3, #0]
	done = 0;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <tcs3200_getPulseFreq+0x54>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htimx, channelx);
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <tcs3200_getPulseFreq+0x50>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <tcs3200_getPulseFreq+0x4c>)
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fad2 	bl	8001abc <HAL_TIM_IC_Start_IT>
//	while(done == 0);
	return f;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <tcs3200_getPulseFreq+0x58>)
 800051a:	881b      	ldrh	r3, [r3, #0]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	bcb0      	pop	{r4, r5, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	b004      	add	sp, #16
 8000526:	4718      	bx	r3
 8000528:	20000034 	.word	0x20000034
 800052c:	2000007c 	.word	0x2000007c
 8000530:	20000031 	.word	0x20000031
 8000534:	2000002e 	.word	0x2000002e

08000538 <tcs3200_freq>:
void tcs3200_freq(enum freq f)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	0002      	movs	r2, r0
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	701a      	strb	r2, [r3, #0]
	switch(f)
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d035      	beq.n	80005b8 <tcs3200_freq+0x80>
 800054c:	dc43      	bgt.n	80005d6 <tcs3200_freq+0x9e>
 800054e:	2b02      	cmp	r3, #2
 8000550:	d023      	beq.n	800059a <tcs3200_freq+0x62>
 8000552:	dc40      	bgt.n	80005d6 <tcs3200_freq+0x9e>
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <tcs3200_freq+0x26>
 8000558:	2b01      	cmp	r3, #1
 800055a:	d00f      	beq.n	800057c <tcs3200_freq+0x44>
	case F_100:
		HAL_GPIO_WritePin(GPIOA, S0, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, S1, GPIO_PIN_SET);
	break;
	}
}
 800055c:	e03b      	b.n	80005d6 <tcs3200_freq+0x9e>
		HAL_GPIO_WritePin(GPIOA, S0, GPIO_PIN_RESET);
 800055e:	2390      	movs	r3, #144	; 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2200      	movs	r2, #0
 8000564:	2101      	movs	r1, #1
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fd96 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S1, GPIO_PIN_RESET);
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fd8f 	bl	8001098 <HAL_GPIO_WritePin>
		break;
 800057a:	e02c      	b.n	80005d6 <tcs3200_freq+0x9e>
		HAL_GPIO_WritePin(GPIOA, S0, GPIO_PIN_RESET);
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fd87 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S1, GPIO_PIN_SET);
 800058a:	2390      	movs	r3, #144	; 0x90
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2201      	movs	r2, #1
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fd80 	bl	8001098 <HAL_GPIO_WritePin>
		break;
 8000598:	e01d      	b.n	80005d6 <tcs3200_freq+0x9e>
		HAL_GPIO_WritePin(GPIOA, S0, GPIO_PIN_SET);
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2201      	movs	r2, #1
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fd78 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S1, GPIO_PIN_RESET);
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2200      	movs	r2, #0
 80005ae:	2102      	movs	r1, #2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fd71 	bl	8001098 <HAL_GPIO_WritePin>
		break;
 80005b6:	e00e      	b.n	80005d6 <tcs3200_freq+0x9e>
		HAL_GPIO_WritePin(GPIOA, S0, GPIO_PIN_SET);
 80005b8:	2390      	movs	r3, #144	; 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fd69 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S1, GPIO_PIN_SET);
 80005c6:	2390      	movs	r3, #144	; 0x90
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2201      	movs	r2, #1
 80005cc:	2102      	movs	r1, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fd62 	bl	8001098 <HAL_GPIO_WritePin>
	break;
 80005d4:	46c0      	nop			; (mov r8, r8)
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}

080005de <tcs3200_switchColor>:
void tcs3200_switchColor(enum color c)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	0002      	movs	r2, r0
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	701a      	strb	r2, [r3, #0]
	switch(c)
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d026      	beq.n	8000640 <tcs3200_switchColor+0x62>
 80005f2:	dc42      	bgt.n	800067a <tcs3200_switchColor+0x9c>
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d031      	beq.n	800065c <tcs3200_switchColor+0x7e>
 80005f8:	dc3f      	bgt.n	800067a <tcs3200_switchColor+0x9c>
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <tcs3200_switchColor+0x26>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00f      	beq.n	8000622 <tcs3200_switchColor+0x44>
		HAL_GPIO_WritePin(GPIOA, S2, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, S3, GPIO_PIN_SET);
		break;
	break;
	}
}
 8000602:	e03a      	b.n	800067a <tcs3200_switchColor+0x9c>
		HAL_GPIO_WritePin(GPIOA, S2, GPIO_PIN_RESET);
 8000604:	2390      	movs	r3, #144	; 0x90
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fd43 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S3, GPIO_PIN_RESET);
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fd3c 	bl	8001098 <HAL_GPIO_WritePin>
		break;
 8000620:	e02b      	b.n	800067a <tcs3200_switchColor+0x9c>
		HAL_GPIO_WritePin(GPIOA, S2, GPIO_PIN_RESET);
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fd34 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S3, GPIO_PIN_SET);
 8000630:	2390      	movs	r3, #144	; 0x90
 8000632:	05db      	lsls	r3, r3, #23
 8000634:	2201      	movs	r2, #1
 8000636:	2108      	movs	r1, #8
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fd2d 	bl	8001098 <HAL_GPIO_WritePin>
		break;
 800063e:	e01c      	b.n	800067a <tcs3200_switchColor+0x9c>
		HAL_GPIO_WritePin(GPIOA, S2, GPIO_PIN_SET);
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fd25 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S3, GPIO_PIN_RESET);
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fd1e 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S2, GPIO_PIN_SET);
 800065c:	2390      	movs	r3, #144	; 0x90
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	2201      	movs	r2, #1
 8000662:	2104      	movs	r1, #4
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fd17 	bl	8001098 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, S3, GPIO_PIN_SET);
 800066a:	2390      	movs	r3, #144	; 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fd10 	bl	8001098 <HAL_GPIO_WritePin>
		break;
 8000678:	46c0      	nop			; (mov r8, r8)
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b093      	sub	sp, #76	; 0x4c
 8000688:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fa2f 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f847 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f90f 	bl	80008b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000696:	f000 f88d 	bl	80007b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
  tcs3200_freq(TCS3200_FREQ_2);
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff ff4c 	bl	8000538 <tcs3200_freq>
  tcs3200_switchColor(RED);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff9c 	bl	80005de <tcs3200_switchColor>
	//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
  uint32_t ff = tcs3200_getPulseFreq(htim1,TIM_CHANNEL_2);
 80006a6:	4c1d      	ldr	r4, [pc, #116]	; (800071c <main+0x98>)
 80006a8:	2304      	movs	r3, #4
 80006aa:	930e      	str	r3, [sp, #56]	; 0x38
 80006ac:	466b      	mov	r3, sp
 80006ae:	0018      	movs	r0, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	3310      	adds	r3, #16
 80006b4:	2238      	movs	r2, #56	; 0x38
 80006b6:	0019      	movs	r1, r3
 80006b8:	f002 f8ec 	bl	8002894 <memcpy>
 80006bc:	6820      	ldr	r0, [r4, #0]
 80006be:	6861      	ldr	r1, [r4, #4]
 80006c0:	68a2      	ldr	r2, [r4, #8]
 80006c2:	68e3      	ldr	r3, [r4, #12]
 80006c4:	f7ff ff0a 	bl	80004dc <tcs3200_getPulseFreq>
 80006c8:	0003      	movs	r3, r0
 80006ca:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  uint32_t ff = tcs3200_getPulseFreq(htim1,TIM_CHANNEL_2);
	  for(int i = 0; i<3;i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	e01f      	b.n	8000712 <main+0x8e>
	  {
		  tcs3200_switchColor(i);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff81 	bl	80005de <tcs3200_switchColor>
		  ff = tcs3200_getPulseFreq(htim1,TIM_CHANNEL_2);
 80006dc:	4c0f      	ldr	r4, [pc, #60]	; (800071c <main+0x98>)
 80006de:	2304      	movs	r3, #4
 80006e0:	930e      	str	r3, [sp, #56]	; 0x38
 80006e2:	466b      	mov	r3, sp
 80006e4:	0018      	movs	r0, r3
 80006e6:	0023      	movs	r3, r4
 80006e8:	3310      	adds	r3, #16
 80006ea:	2238      	movs	r2, #56	; 0x38
 80006ec:	0019      	movs	r1, r3
 80006ee:	f002 f8d1 	bl	8002894 <memcpy>
 80006f2:	6820      	ldr	r0, [r4, #0]
 80006f4:	6861      	ldr	r1, [r4, #4]
 80006f6:	68a2      	ldr	r2, [r4, #8]
 80006f8:	68e3      	ldr	r3, [r4, #12]
 80006fa:	f7ff feef 	bl	80004dc <tcs3200_getPulseFreq>
 80006fe:	0003      	movs	r3, r0
 8000700:	603b      	str	r3, [r7, #0]
		  HAL_Delay(1000);
 8000702:	23fa      	movs	r3, #250	; 0xfa
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fa54 	bl	8000bb4 <HAL_Delay>
	  for(int i = 0; i<3;i++)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b02      	cmp	r3, #2
 8000716:	dddc      	ble.n	80006d2 <main+0x4e>
 8000718:	e7d8      	b.n	80006cc <main+0x48>
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000080 	.word	0x20000080

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b091      	sub	sp, #68	; 0x44
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	2410      	movs	r4, #16
 8000728:	193b      	adds	r3, r7, r4
 800072a:	0018      	movs	r0, r3
 800072c:	2330      	movs	r3, #48	; 0x30
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f002 f8b8 	bl	80028a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000736:	003b      	movs	r3, r7
 8000738:	0018      	movs	r0, r3
 800073a:	2310      	movs	r3, #16
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 f8b1 	bl	80028a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2202      	movs	r2, #2
 800074a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2210      	movs	r2, #16
 8000756:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2202      	movs	r2, #2
 800075c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22a0      	movs	r2, #160	; 0xa0
 8000768:	0392      	lsls	r2, r2, #14
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	187b      	adds	r3, r7, r1
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fcad 	bl	80010d4 <HAL_RCC_OscConfig>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800077e:	f000 f8e1 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	003b      	movs	r3, r7
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	003b      	movs	r3, r7
 800078a:	2202      	movs	r2, #2
 800078c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	003b      	movs	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079a:	003b      	movs	r3, r7
 800079c:	2101      	movs	r1, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 ffb2 	bl	8001708 <HAL_RCC_ClockConfig>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f8cc 	bl	8000944 <Error_Handler>
  }
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b011      	add	sp, #68	; 0x44
 80007b2:	bd90      	pop	{r4, r7, pc}

080007b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	2318      	movs	r3, #24
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0018      	movs	r0, r3
 80007c0:	2310      	movs	r3, #16
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f002 f86e 	bl	80028a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	2310      	movs	r3, #16
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	0018      	movs	r0, r3
 80007d0:	2308      	movs	r3, #8
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f002 f866 	bl	80028a6 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007da:	003b      	movs	r3, r7
 80007dc:	0018      	movs	r0, r3
 80007de:	2310      	movs	r3, #16
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f002 f85f 	bl	80028a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_TIM1_Init+0xf4>)
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <MX_TIM1_Init+0xf8>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_TIM1_Init+0xf4>)
 80007f0:	222f      	movs	r2, #47	; 0x2f
 80007f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_TIM1_Init+0xf4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_TIM1_Init+0xf4>)
 80007fc:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <MX_TIM1_Init+0xfc>)
 80007fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM1_Init+0xf4>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_TIM1_Init+0xf4>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM1_Init+0xf4>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_TIM1_Init+0xf4>)
 8000814:	0018      	movs	r0, r3
 8000816:	f001 f8a9 	bl	800196c <HAL_TIM_Base_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f891 	bl	8000944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	2118      	movs	r1, #24
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0152      	lsls	r2, r2, #5
 800082a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082c:	187a      	adds	r2, r7, r1
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM1_Init+0xf4>)
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fc7a 	bl	800212c <HAL_TIM_ConfigClockSource>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f882 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM1_Init+0xf4>)
 8000842:	0018      	movs	r0, r3
 8000844:	f001 f8e2 	bl	8001a0c <HAL_TIM_IC_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800084c:	f000 f87a 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2110      	movs	r1, #16
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085e:	187a      	adds	r2, r7, r1
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_TIM1_Init+0xf4>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 ff8f 	bl	8002788 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800086e:	f000 f869 	bl	8000944 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000872:	003b      	movs	r3, r7
 8000874:	2202      	movs	r2, #2
 8000876:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000878:	003b      	movs	r3, r7
 800087a:	2201      	movs	r2, #1
 800087c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800087e:	003b      	movs	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000884:	003b      	movs	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	0039      	movs	r1, r7
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_TIM1_Init+0xf4>)
 800088e:	2204      	movs	r2, #4
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fbb5 	bl	8002000 <HAL_TIM_IC_ConfigChannel>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800089a:	f000 f853 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b00a      	add	sp, #40	; 0x28
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000080 	.word	0x20000080
 80008ac:	40012c00 	.word	0x40012c00
 80008b0:	0000fffe 	.word	0x0000fffe

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	240c      	movs	r4, #12
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	0018      	movs	r0, r3
 80008c0:	2314      	movs	r3, #20
 80008c2:	001a      	movs	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	f001 ffee 	bl	80028a6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_GPIO_Init+0x8c>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_GPIO_Init+0x8c>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	03c9      	lsls	r1, r1, #15
 80008d4:	430a      	orrs	r2, r1
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_GPIO_Init+0x8c>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_GPIO_Init+0x8c>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0x8c>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0289      	lsls	r1, r1, #10
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_GPIO_Init+0x8c>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	029b      	lsls	r3, r3, #10
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000902:	2390      	movs	r3, #144	; 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fbc4 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000910:	0021      	movs	r1, r4
 8000912:	187b      	adds	r3, r7, r1
 8000914:	220f      	movs	r2, #15
 8000916:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2201      	movs	r2, #1
 800091c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	187a      	adds	r2, r7, r1
 800092c:	2390      	movs	r3, #144	; 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fa40 	bl	8000db8 <HAL_GPIO_Init>

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b009      	add	sp, #36	; 0x24
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	699a      	ldr	r2, [r3, #24]
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	619a      	str	r2, [r3, #24]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	69da      	ldr	r2, [r3, #28]
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0549      	lsls	r1, r1, #21
 8000978:	430a      	orrs	r2, r1
 800097a:	61da      	str	r2, [r3, #28]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_MspInit+0x44>)
 800097e:	69da      	ldr	r2, [r3, #28]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	055b      	lsls	r3, r3, #21
 8000984:	4013      	ands	r3, r2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	2414      	movs	r4, #20
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2314      	movs	r3, #20
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f001 ff7b 	bl	80028a6 <memset>
  if(htim_base->Instance==TIM1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <HAL_TIM_Base_MspInit+0xa4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d13b      	bne.n	8000a32 <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <HAL_TIM_Base_MspInit+0xa8>)
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <HAL_TIM_Base_MspInit+0xa8>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0109      	lsls	r1, r1, #4
 80009c4:	430a      	orrs	r2, r1
 80009c6:	619a      	str	r2, [r3, #24]
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_TIM_Base_MspInit+0xa8>)
 80009ca:	699a      	ldr	r2, [r3, #24]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_TIM_Base_MspInit+0xa8>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_TIM_Base_MspInit+0xa8>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_TIM_Base_MspInit+0xa8>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 f9cb 	bl	8000db8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200e      	movs	r0, #14
 8000a28:	f000 f994 	bl	8000d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a2c:	200e      	movs	r0, #14
 8000a2e:	f000 f9a6 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b00b      	add	sp, #44	; 0x2c
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40021000 	.word	0x40021000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f888 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <TIM1_CC_IRQHandler+0x14>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 f9aa 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000080 	.word	0x20000080

08000a8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490e      	ldr	r1, [pc, #56]	; (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0b      	ldr	r4, [pc, #44]	; (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac2:	f7ff ffe3 	bl	8000a8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ac6:	f001 fec1 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fddb 	bl	8000684 <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   r0, =_estack
 8000ad0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08002908 	.word	0x08002908
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	200000cc 	.word	0x200000cc

08000ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_IRQHandler>
	...

08000aec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_Init+0x24>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_Init+0x24>)
 8000af6:	2110      	movs	r1, #16
 8000af8:	430a      	orrs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 f809 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b02:	f7ff ff25 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b1e:	681c      	ldr	r4, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x60>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	0019      	movs	r1, r3
 8000b26:	23fa      	movs	r3, #250	; 0xfa
 8000b28:	0098      	lsls	r0, r3, #2
 8000b2a:	f7ff faed 	bl	8000108 <__udivsi3>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	0019      	movs	r1, r3
 8000b32:	0020      	movs	r0, r4
 8000b34:	f7ff fae8 	bl	8000108 <__udivsi3>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f92f 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e00f      	b.n	8000b68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d80b      	bhi.n	8000b66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f8fc 	bl	8000d54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_InitTick+0x64>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	001a      	movs	r2, r3
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x20>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	18d2      	adds	r2, r2, r3
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_IncTick+0x20>)
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200000c8 	.word	0x200000c8

08000ba0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <HAL_GetTick+0x10>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	200000c8 	.word	0x200000c8

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff fff0 	bl	8000ba0 <HAL_GetTick>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	189b      	adds	r3, r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	f7ff ffe0 	bl	8000ba0 <HAL_GetTick>
 8000be0:	0002      	movs	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000008 	.word	0x20000008

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c0e:	d809      	bhi.n	8000c24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	001a      	movs	r2, r3
 8000c16:	231f      	movs	r3, #31
 8000c18:	401a      	ands	r2, r3
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_EnableIRQ+0x30>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	000a      	movs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
  }
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b7f      	cmp	r3, #127	; 0x7f
 8000c44:	d828      	bhi.n	8000c98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c46:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <__NVIC_SetPriority+0xd4>)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	33c0      	adds	r3, #192	; 0xc0
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	589b      	ldr	r3, [r3, r2]
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	400a      	ands	r2, r1
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	21ff      	movs	r1, #255	; 0xff
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	22ff      	movs	r2, #255	; 0xff
 8000c74:	401a      	ands	r2, r3
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	4003      	ands	r3, r0
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c84:	481f      	ldr	r0, [pc, #124]	; (8000d04 <__NVIC_SetPriority+0xd4>)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	33c0      	adds	r3, #192	; 0xc0
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c96:	e031      	b.n	8000cfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <__NVIC_SetPriority+0xd8>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	3b08      	subs	r3, #8
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3306      	adds	r3, #6
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	3304      	adds	r3, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1dfa      	adds	r2, r7, #7
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	2203      	movs	r2, #3
 8000cba:	400a      	ands	r2, r1
 8000cbc:	00d2      	lsls	r2, r2, #3
 8000cbe:	21ff      	movs	r1, #255	; 0xff
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	43d2      	mvns	r2, r2
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	22ff      	movs	r2, #255	; 0xff
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	2303      	movs	r3, #3
 8000cda:	4003      	ands	r3, r0
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <__NVIC_SetPriority+0xd8>)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	001c      	movs	r4, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	4023      	ands	r3, r4
 8000cec:	3b08      	subs	r3, #8
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	3306      	adds	r3, #6
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	18c3      	adds	r3, r0, r3
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b003      	add	sp, #12
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	1e5a      	subs	r2, r3, #1
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	045b      	lsls	r3, r3, #17
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d301      	bcc.n	8000d24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d20:	2301      	movs	r3, #1
 8000d22:	e010      	b.n	8000d46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <SysTick_Config+0x44>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	3a01      	subs	r2, #1
 8000d2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	2103      	movs	r1, #3
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff ff7c 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x44>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x44>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	210f      	movs	r1, #15
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	1c02      	adds	r2, r0, #0
 8000d64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	0002      	movs	r2, r0
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff ff33 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ffaf 	bl	8000d0c <SysTick_Config>
 8000dae:	0003      	movs	r3, r0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e14f      	b.n	8001068 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d100      	bne.n	8000de0 <HAL_GPIO_Init+0x28>
 8000dde:	e140      	b.n	8001062 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d00b      	beq.n	8000e00 <HAL_GPIO_Init+0x48>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df4:	2b11      	cmp	r3, #17
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b12      	cmp	r3, #18
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0xea>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2107      	movs	r1, #7
 8000ece:	400b      	ands	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	401a      	ands	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	055b      	lsls	r3, r3, #21
 8000f26:	4013      	ands	r3, r2
 8000f28:	d100      	bne.n	8000f2c <HAL_GPIO_Init+0x174>
 8000f2a:	e09a      	b.n	8001062 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	4b53      	ldr	r3, [pc, #332]	; (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	4b51      	ldr	r3, [pc, #324]	; (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	589b      	ldr	r3, [r3, r2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	2390      	movs	r3, #144	; 0x90
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1e2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1de>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_GPIO_Init+0x2d4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1da>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_GPIO_Init+0x2d8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1d6>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x1e4>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x1e4>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x1e4>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x1e4>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	025b      	lsls	r3, r3, #9
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	035b      	lsls	r3, r3, #13
 8001026:	4013      	ands	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	039b      	lsls	r3, r3, #14
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_GPIO_Init+0x2dc>)
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	40da      	lsrs	r2, r3
 8001070:	1e13      	subs	r3, r2, #0
 8001072:	d000      	beq.n	8001076 <HAL_GPIO_Init+0x2be>
 8001074:	e6a8      	b.n	8000dc8 <HAL_GPIO_Init+0x10>
  } 
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	0008      	movs	r0, r1
 80010a2:	0011      	movs	r1, r2
 80010a4:	1cbb      	adds	r3, r7, #2
 80010a6:	1c02      	adds	r2, r0, #0
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	1c7b      	adds	r3, r7, #1
 80010ac:	1c0a      	adds	r2, r1, #0
 80010ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b0:	1c7b      	adds	r3, r7, #1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b8:	1cbb      	adds	r3, r7, #2
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c2:	1cbb      	adds	r3, r7, #2
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e301      	b.n	80016ea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2201      	movs	r2, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	d100      	bne.n	80010f2 <HAL_RCC_OscConfig+0x1e>
 80010f0:	e08d      	b.n	800120e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f2:	4bc3      	ldr	r3, [pc, #780]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	220c      	movs	r2, #12
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00e      	beq.n	800111c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fe:	4bc0      	ldr	r3, [pc, #768]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	220c      	movs	r2, #12
 8001104:	4013      	ands	r3, r2
 8001106:	2b08      	cmp	r3, #8
 8001108:	d116      	bne.n	8001138 <HAL_RCC_OscConfig+0x64>
 800110a:	4bbd      	ldr	r3, [pc, #756]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	401a      	ands	r2, r3
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	429a      	cmp	r2, r3
 800111a:	d10d      	bne.n	8001138 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4bb8      	ldr	r3, [pc, #736]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x56>
 8001128:	e070      	b.n	800120c <HAL_RCC_OscConfig+0x138>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d000      	beq.n	8001134 <HAL_RCC_OscConfig+0x60>
 8001132:	e06b      	b.n	800120c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e2d8      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_RCC_OscConfig+0x7c>
 8001140:	4baf      	ldr	r3, [pc, #700]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4bae      	ldr	r3, [pc, #696]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e02f      	b.n	80011b0 <HAL_RCC_OscConfig+0xdc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10c      	bne.n	8001172 <HAL_RCC_OscConfig+0x9e>
 8001158:	4ba9      	ldr	r3, [pc, #676]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4ba8      	ldr	r3, [pc, #672]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800115e:	49a9      	ldr	r1, [pc, #676]	; (8001404 <HAL_RCC_OscConfig+0x330>)
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	4ba6      	ldr	r3, [pc, #664]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4ba5      	ldr	r3, [pc, #660]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800116a:	49a7      	ldr	r1, [pc, #668]	; (8001408 <HAL_RCC_OscConfig+0x334>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e01e      	b.n	80011b0 <HAL_RCC_OscConfig+0xdc>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d10e      	bne.n	8001198 <HAL_RCC_OscConfig+0xc4>
 800117a:	4ba1      	ldr	r3, [pc, #644]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4ba0      	ldr	r3, [pc, #640]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	02c9      	lsls	r1, r1, #11
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	4b9d      	ldr	r3, [pc, #628]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b9c      	ldr	r3, [pc, #624]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0249      	lsls	r1, r1, #9
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xdc>
 8001198:	4b99      	ldr	r3, [pc, #612]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b98      	ldr	r3, [pc, #608]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800119e:	4999      	ldr	r1, [pc, #612]	; (8001404 <HAL_RCC_OscConfig+0x330>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4b96      	ldr	r3, [pc, #600]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b95      	ldr	r3, [pc, #596]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	4997      	ldr	r1, [pc, #604]	; (8001408 <HAL_RCC_OscConfig+0x334>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fcf2 	bl	8000ba0 <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff fced 	bl	8000ba0 <HAL_GetTick>
 80011c6:	0002      	movs	r2, r0
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e28a      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d4:	4b8a      	ldr	r3, [pc, #552]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	029b      	lsls	r3, r3, #10
 80011dc:	4013      	ands	r3, r2
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0xee>
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcdd 	bl	8000ba0 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fcd8 	bl	8000ba0 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e275      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b80      	ldr	r3, [pc, #512]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	029b      	lsls	r3, r3, #10
 8001206:	4013      	ands	r3, r2
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x118>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d100      	bne.n	800121a <HAL_RCC_OscConfig+0x146>
 8001218:	e069      	b.n	80012ee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800121a:	4b79      	ldr	r3, [pc, #484]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	220c      	movs	r2, #12
 8001220:	4013      	ands	r3, r2
 8001222:	d00b      	beq.n	800123c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001224:	4b76      	ldr	r3, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	220c      	movs	r2, #12
 800122a:	4013      	ands	r3, r2
 800122c:	2b08      	cmp	r3, #8
 800122e:	d11c      	bne.n	800126a <HAL_RCC_OscConfig+0x196>
 8001230:	4b73      	ldr	r3, [pc, #460]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	025b      	lsls	r3, r3, #9
 8001238:	4013      	ands	r3, r2
 800123a:	d116      	bne.n	800126a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123c:	4b70      	ldr	r3, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2202      	movs	r2, #2
 8001242:	4013      	ands	r3, r2
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x17e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e24b      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22f8      	movs	r2, #248	; 0xf8
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	00da      	lsls	r2, r3, #3
 8001262:	4b67      	ldr	r3, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001268:	e041      	b.n	80012ee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d024      	beq.n	80012bc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fc8f 	bl	8000ba0 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc8a 	bl	8000ba0 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e227      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d0f1      	beq.n	8001288 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	22f8      	movs	r2, #248	; 0xf8
 80012aa:	4393      	bics	r3, r2
 80012ac:	0019      	movs	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e018      	b.n	80012ee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012bc:	4b50      	ldr	r3, [pc, #320]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc6a 	bl	8000ba0 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc65 	bl	8000ba0 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e202      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f1      	bne.n	80012d2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2208      	movs	r2, #8
 80012f4:	4013      	ands	r3, r2
 80012f6:	d036      	beq.n	8001366 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d019      	beq.n	8001334 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001306:	2101      	movs	r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fc48 	bl	8000ba0 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc43 	bl	8000ba0 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1e0      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d0f1      	beq.n	8001316 <HAL_RCC_OscConfig+0x242>
 8001332:	e018      	b.n	8001366 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800133a:	2101      	movs	r1, #1
 800133c:	438a      	bics	r2, r1
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fc2e 	bl	8000ba0 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134a:	f7ff fc29 	bl	8000ba0 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1c6      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	2202      	movs	r2, #2
 8001362:	4013      	ands	r3, r2
 8001364:	d1f1      	bne.n	800134a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2204      	movs	r2, #4
 800136c:	4013      	ands	r3, r2
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0x29e>
 8001370:	e0b4      	b.n	80014dc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001372:	201f      	movs	r0, #31
 8001374:	183b      	adds	r3, r7, r0
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800137c:	69da      	ldr	r2, [r3, #28]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	055b      	lsls	r3, r3, #21
 8001382:	4013      	ands	r3, r2
 8001384:	d110      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001388:	69da      	ldr	r2, [r3, #28]
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0549      	lsls	r1, r1, #21
 8001390:	430a      	orrs	r2, r1
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 8001396:	69da      	ldr	r2, [r3, #28]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a2:	183b      	adds	r3, r7, r0
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	d11a      	bne.n	80013ea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_RCC_OscConfig+0x338>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_RCC_OscConfig+0x338>)
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0049      	lsls	r1, r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fbed 	bl	8000ba0 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013cc:	f7ff fbe8 	bl	8000ba0 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e185      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_OscConfig+0x338>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10e      	bne.n	8001410 <HAL_RCC_OscConfig+0x33c>
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	6a1a      	ldr	r2, [r3, #32]
 80013f6:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	621a      	str	r2, [r3, #32]
 80013fe:	e035      	b.n	800146c <HAL_RCC_OscConfig+0x398>
 8001400:	40021000 	.word	0x40021000
 8001404:	fffeffff 	.word	0xfffeffff
 8001408:	fffbffff 	.word	0xfffbffff
 800140c:	40007000 	.word	0x40007000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x35e>
 8001418:	4bb6      	ldr	r3, [pc, #728]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4bb5      	ldr	r3, [pc, #724]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800141e:	2101      	movs	r1, #1
 8001420:	438a      	bics	r2, r1
 8001422:	621a      	str	r2, [r3, #32]
 8001424:	4bb3      	ldr	r3, [pc, #716]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	4bb2      	ldr	r3, [pc, #712]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800142a:	2104      	movs	r1, #4
 800142c:	438a      	bics	r2, r1
 800142e:	621a      	str	r2, [r3, #32]
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x398>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x380>
 800143a:	4bae      	ldr	r3, [pc, #696]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	4bad      	ldr	r3, [pc, #692]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001440:	2104      	movs	r1, #4
 8001442:	430a      	orrs	r2, r1
 8001444:	621a      	str	r2, [r3, #32]
 8001446:	4bab      	ldr	r3, [pc, #684]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4baa      	ldr	r3, [pc, #680]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0x398>
 8001454:	4ba7      	ldr	r3, [pc, #668]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4ba6      	ldr	r3, [pc, #664]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	4ba4      	ldr	r3, [pc, #656]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	4ba3      	ldr	r3, [pc, #652]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d014      	beq.n	800149e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fb94 	bl	8000ba0 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	e009      	b.n	8001492 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fb8f 	bl	8000ba0 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a9b      	ldr	r2, [pc, #620]	; (80016f8 <HAL_RCC_OscConfig+0x624>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e12b      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001492:	4b98      	ldr	r3, [pc, #608]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x3aa>
 800149c:	e013      	b.n	80014c6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb7f 	bl	8000ba0 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb7a 	bl	8000ba0 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4a91      	ldr	r2, [pc, #580]	; (80016f8 <HAL_RCC_OscConfig+0x624>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e116      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b8d      	ldr	r3, [pc, #564]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014c6:	231f      	movs	r3, #31
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	4b87      	ldr	r3, [pc, #540]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80014d6:	4989      	ldr	r1, [pc, #548]	; (80016fc <HAL_RCC_OscConfig+0x628>)
 80014d8:	400a      	ands	r2, r1
 80014da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	4013      	ands	r3, r2
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d12a      	bne.n	8001544 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b80      	ldr	r3, [pc, #512]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80014f4:	2104      	movs	r1, #4
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014fa:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fb4b 	bl	8000ba0 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001510:	f7ff fb46 	bl	8000ba0 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0e3      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d0f1      	beq.n	8001510 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	22f8      	movs	r2, #248	; 0xf8
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	00da      	lsls	r2, r3, #3
 800153c:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
 8001542:	e034      	b.n	80015ae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	3305      	adds	r3, #5
 800154a:	d111      	bne.n	8001570 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800154e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	22f8      	movs	r2, #248	; 0xf8
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	00da      	lsls	r2, r3, #3
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
 800156e:	e01e      	b.n	80015ae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001570:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001576:	2104      	movs	r1, #4
 8001578:	430a      	orrs	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800157c:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800157e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fb0a 	bl	8000ba0 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001592:	f7ff fb05 	bl	8000ba0 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0a2      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4e4>
 80015b6:	e097      	b.n	80016e8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b8:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	220c      	movs	r2, #12
 80015be:	4013      	ands	r3, r2
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x4f2>
 80015c4:	e06b      	b.n	800169e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d14c      	bne.n	8001668 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80015d4:	494a      	ldr	r1, [pc, #296]	; (8001700 <HAL_RCC_OscConfig+0x62c>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fae1 	bl	8000ba0 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fadc 	bl	8000ba0 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e079      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	049b      	lsls	r3, r3, #18
 80015fe:	4013      	ands	r3, r2
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001602:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	220f      	movs	r2, #15
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001612:	430a      	orrs	r2, r1
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <HAL_RCC_OscConfig+0x630>)
 800161c:	4013      	ands	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	431a      	orrs	r2, r3
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0449      	lsls	r1, r1, #17
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff faaf 	bl	8000ba0 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff faaa 	bl	8000ba0 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e047      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	049b      	lsls	r3, r3, #18
 8001662:	4013      	ands	r3, r2
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x574>
 8001666:	e03f      	b.n	80016e8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 800166e:	4924      	ldr	r1, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x62c>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa94 	bl	8000ba0 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa8f 	bl	8000ba0 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e02c      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	049b      	lsls	r3, r3, #18
 8001698:	4013      	ands	r3, r2
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x5aa>
 800169c:	e024      	b.n	80016e8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e01f      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x620>)
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d10e      	bne.n	80016e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	220f      	movs	r2, #15
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	23f0      	movs	r3, #240	; 0xf0
 80016d8:	039b      	lsls	r3, r3, #14
 80016da:	401a      	ands	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b008      	add	sp, #32
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40021000 	.word	0x40021000
 80016f8:	00001388 	.word	0x00001388
 80016fc:	efffffff 	.word	0xefffffff
 8001700:	feffffff 	.word	0xfeffffff
 8001704:	ffc2ffff 	.word	0xffc2ffff

08001708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b3      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d911      	bls.n	800174e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	4393      	bics	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e09a      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d015      	beq.n	8001784 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2204      	movs	r2, #4
 800175e:	4013      	ands	r3, r2
 8001760:	d006      	beq.n	8001770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001762:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001768:	21e0      	movs	r1, #224	; 0xe0
 800176a:	00c9      	lsls	r1, r1, #3
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	22f0      	movs	r2, #240	; 0xf0
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	d040      	beq.n	8001810 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	4013      	ands	r3, r2
 80017a0:	d114      	bne.n	80017cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06e      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	049b      	lsls	r3, r3, #18
 80017b6:	4013      	ands	r3, r2
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e062      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e05b      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff f9de 	bl	8000ba0 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f9d9 	bl	8000ba0 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <HAL_RCC_ClockConfig+0x18c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e042      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	220c      	movs	r2, #12
 8001804:	401a      	ands	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ec      	bne.n	80017ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d211      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4393      	bics	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_RCC_ClockConfig+0x184>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	4013      	ands	r3, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	4013      	ands	r3, r2
 800184a:	d009      	beq.n	8001860 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_RCC_ClockConfig+0x190>)
 8001852:	4013      	ands	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001860:	f000 f820 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001864:	0001      	movs	r1, r0
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x188>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	220f      	movs	r2, #15
 800186e:	4013      	ands	r3, r2
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x194>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	000a      	movs	r2, r1
 8001876:	40da      	lsrs	r2, r3
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x198>)
 800187a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff f949 	bl	8000b14 <HAL_InitTick>
  
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40022000 	.word	0x40022000
 8001890:	40021000 	.word	0x40021000
 8001894:	00001388 	.word	0x00001388
 8001898:	fffff8ff 	.word	0xfffff8ff
 800189c:	080028f0 	.word	0x080028f0
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b08f      	sub	sp, #60	; 0x3c
 80018a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018aa:	2314      	movs	r3, #20
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	4a2b      	ldr	r2, [pc, #172]	; (800195c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018b2:	c313      	stmia	r3!, {r0, r1, r4}
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4a29      	ldr	r2, [pc, #164]	; (8001960 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018be:	c313      	stmia	r3!, {r0, r1, r4}
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	220c      	movs	r2, #12
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d002      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x4a>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d003      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x50>
 80018ec:	e02d      	b.n	800194a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f2:	e02d      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	0c9b      	lsrs	r3, r3, #18
 80018f8:	220f      	movs	r2, #15
 80018fa:	4013      	ands	r3, r2
 80018fc:	2214      	movs	r2, #20
 80018fe:	18ba      	adds	r2, r7, r2
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	220f      	movs	r2, #15
 800190a:	4013      	ands	r3, r2
 800190c:	1d3a      	adds	r2, r7, #4
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	4013      	ands	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800191c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001920:	f7fe fbf2 	bl	8000108 <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	001a      	movs	r2, r3
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	4353      	muls	r3, r2
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
 800192e:	e009      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001932:	000a      	movs	r2, r1
 8001934:	0152      	lsls	r2, r2, #5
 8001936:	1a52      	subs	r2, r2, r1
 8001938:	0193      	lsls	r3, r2, #6
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	185b      	adds	r3, r3, r1
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001948:	e002      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_RCC_GetSysClockFreq+0xc4>)
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800194e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b00f      	add	sp, #60	; 0x3c
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	080028d0 	.word	0x080028d0
 8001960:	080028e0 	.word	0x080028e0
 8001964:	40021000 	.word	0x40021000
 8001968:	007a1200 	.word	0x007a1200

0800196c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e042      	b.n	8001a04 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	223d      	movs	r2, #61	; 0x3d
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	223c      	movs	r2, #60	; 0x3c
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	0018      	movs	r0, r3
 8001996:	f7fe ffff 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	223d      	movs	r2, #61	; 0x3d
 800199e:	2102      	movs	r1, #2
 80019a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	0019      	movs	r1, r3
 80019ac:	0010      	movs	r0, r2
 80019ae:	f000 fca7 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2246      	movs	r2, #70	; 0x46
 80019b6:	2101      	movs	r1, #1
 80019b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	223e      	movs	r2, #62	; 0x3e
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	223f      	movs	r2, #63	; 0x3f
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2241      	movs	r2, #65	; 0x41
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2242      	movs	r2, #66	; 0x42
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2243      	movs	r2, #67	; 0x43
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2244      	movs	r2, #68	; 0x44
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2245      	movs	r2, #69	; 0x45
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223d      	movs	r2, #61	; 0x3d
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e042      	b.n	8001aa4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	223d      	movs	r2, #61	; 0x3d
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223c      	movs	r2, #60	; 0x3c
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 f839 	bl	8001aac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	223d      	movs	r2, #61	; 0x3d
 8001a3e:	2102      	movs	r1, #2
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	f000 fc57 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2246      	movs	r2, #70	; 0x46
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223e      	movs	r2, #62	; 0x3e
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	223f      	movs	r2, #63	; 0x3f
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2241      	movs	r2, #65	; 0x41
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2242      	movs	r2, #66	; 0x42
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2243      	movs	r2, #67	; 0x43
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2244      	movs	r2, #68	; 0x44
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2245      	movs	r2, #69	; 0x45
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223d      	movs	r2, #61	; 0x3d
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d104      	bne.n	8001ad6 <HAL_TIM_IC_Start_IT+0x1a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	223e      	movs	r2, #62	; 0x3e
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e013      	b.n	8001afe <HAL_TIM_IC_Start_IT+0x42>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d104      	bne.n	8001ae6 <HAL_TIM_IC_Start_IT+0x2a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	223f      	movs	r2, #63	; 0x3f
 8001ae0:	5c9b      	ldrb	r3, [r3, r2]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	e00b      	b.n	8001afe <HAL_TIM_IC_Start_IT+0x42>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d104      	bne.n	8001af6 <HAL_TIM_IC_Start_IT+0x3a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	5c9b      	ldrb	r3, [r3, r2]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e003      	b.n	8001afe <HAL_TIM_IC_Start_IT+0x42>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2241      	movs	r2, #65	; 0x41
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	220f      	movs	r2, #15
 8001b00:	18ba      	adds	r2, r7, r2
 8001b02:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d104      	bne.n	8001b14 <HAL_TIM_IC_Start_IT+0x58>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2242      	movs	r2, #66	; 0x42
 8001b0e:	5c9b      	ldrb	r3, [r3, r2]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e013      	b.n	8001b3c <HAL_TIM_IC_Start_IT+0x80>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d104      	bne.n	8001b24 <HAL_TIM_IC_Start_IT+0x68>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2243      	movs	r2, #67	; 0x43
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e00b      	b.n	8001b3c <HAL_TIM_IC_Start_IT+0x80>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d104      	bne.n	8001b34 <HAL_TIM_IC_Start_IT+0x78>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2244      	movs	r2, #68	; 0x44
 8001b2e:	5c9b      	ldrb	r3, [r3, r2]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e003      	b.n	8001b3c <HAL_TIM_IC_Start_IT+0x80>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2245      	movs	r2, #69	; 0x45
 8001b38:	5c9b      	ldrb	r3, [r3, r2]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	210e      	movs	r1, #14
 8001b3e:	187a      	adds	r2, r7, r1
 8001b40:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b42:	230f      	movs	r3, #15
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d103      	bne.n	8001b54 <HAL_TIM_IC_Start_IT+0x98>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_IC_Start_IT+0x9c>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e09b      	b.n	8001c90 <HAL_TIM_IC_Start_IT+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <HAL_TIM_IC_Start_IT+0xac>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	223e      	movs	r2, #62	; 0x3e
 8001b62:	2102      	movs	r1, #2
 8001b64:	5499      	strb	r1, [r3, r2]
 8001b66:	e013      	b.n	8001b90 <HAL_TIM_IC_Start_IT+0xd4>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d104      	bne.n	8001b78 <HAL_TIM_IC_Start_IT+0xbc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	223f      	movs	r2, #63	; 0x3f
 8001b72:	2102      	movs	r1, #2
 8001b74:	5499      	strb	r1, [r3, r2]
 8001b76:	e00b      	b.n	8001b90 <HAL_TIM_IC_Start_IT+0xd4>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d104      	bne.n	8001b88 <HAL_TIM_IC_Start_IT+0xcc>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2240      	movs	r2, #64	; 0x40
 8001b82:	2102      	movs	r1, #2
 8001b84:	5499      	strb	r1, [r3, r2]
 8001b86:	e003      	b.n	8001b90 <HAL_TIM_IC_Start_IT+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2241      	movs	r2, #65	; 0x41
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d104      	bne.n	8001ba0 <HAL_TIM_IC_Start_IT+0xe4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2242      	movs	r2, #66	; 0x42
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	5499      	strb	r1, [r3, r2]
 8001b9e:	e013      	b.n	8001bc8 <HAL_TIM_IC_Start_IT+0x10c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d104      	bne.n	8001bb0 <HAL_TIM_IC_Start_IT+0xf4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2243      	movs	r2, #67	; 0x43
 8001baa:	2102      	movs	r1, #2
 8001bac:	5499      	strb	r1, [r3, r2]
 8001bae:	e00b      	b.n	8001bc8 <HAL_TIM_IC_Start_IT+0x10c>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d104      	bne.n	8001bc0 <HAL_TIM_IC_Start_IT+0x104>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2244      	movs	r2, #68	; 0x44
 8001bba:	2102      	movs	r1, #2
 8001bbc:	5499      	strb	r1, [r3, r2]
 8001bbe:	e003      	b.n	8001bc8 <HAL_TIM_IC_Start_IT+0x10c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2245      	movs	r2, #69	; 0x45
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d02a      	beq.n	8001c24 <HAL_TIM_IC_Start_IT+0x168>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d830      	bhi.n	8001c36 <HAL_TIM_IC_Start_IT+0x17a>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d01b      	beq.n	8001c12 <HAL_TIM_IC_Start_IT+0x156>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d82a      	bhi.n	8001c36 <HAL_TIM_IC_Start_IT+0x17a>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IC_Start_IT+0x132>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d009      	beq.n	8001c00 <HAL_TIM_IC_Start_IT+0x144>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8001bec:	e023      	b.n	8001c36 <HAL_TIM_IC_Start_IT+0x17a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]
      break;
 8001bfe:	e01b      	b.n	8001c38 <HAL_TIM_IC_Start_IT+0x17c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]
      break;
 8001c10:	e012      	b.n	8001c38 <HAL_TIM_IC_Start_IT+0x17c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]
      break;
 8001c22:	e009      	b.n	8001c38 <HAL_TIM_IC_Start_IT+0x17c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2110      	movs	r1, #16
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]
      break;
 8001c34:	e000      	b.n	8001c38 <HAL_TIM_IC_Start_IT+0x17c>
      break;
 8001c36:	46c0      	nop			; (mov r8, r8)
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fd7d 	bl	8002740 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_TIM_IC_Start_IT+0x1dc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d004      	beq.n	8001c5a <HAL_TIM_IC_Start_IT+0x19e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_TIM_IC_Start_IT+0x1e0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d111      	bne.n	8001c7e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2207      	movs	r2, #7
 8001c62:	4013      	ands	r3, r2
 8001c64:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d010      	beq.n	8001c8e <HAL_TIM_IC_Start_IT+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7c:	e007      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40000400 	.word	0x40000400

08001ca0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d02a      	beq.n	8001d06 <HAL_TIM_IC_Stop_IT+0x66>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d830      	bhi.n	8001d18 <HAL_TIM_IC_Stop_IT+0x78>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d01b      	beq.n	8001cf4 <HAL_TIM_IC_Stop_IT+0x54>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d82a      	bhi.n	8001d18 <HAL_TIM_IC_Stop_IT+0x78>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_TIM_IC_Stop_IT+0x30>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d009      	beq.n	8001ce2 <HAL_TIM_IC_Stop_IT+0x42>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8001cce:	e023      	b.n	8001d18 <HAL_TIM_IC_Stop_IT+0x78>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2102      	movs	r1, #2
 8001cdc:	438a      	bics	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
      break;
 8001ce0:	e01b      	b.n	8001d1a <HAL_TIM_IC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2104      	movs	r1, #4
 8001cee:	438a      	bics	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]
      break;
 8001cf2:	e012      	b.n	8001d1a <HAL_TIM_IC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2108      	movs	r1, #8
 8001d00:	438a      	bics	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]
      break;
 8001d04:	e009      	b.n	8001d1a <HAL_TIM_IC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2110      	movs	r1, #16
 8001d12:	438a      	bics	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]
      break;
 8001d16:	e000      	b.n	8001d1a <HAL_TIM_IC_Stop_IT+0x7a>
      break;
 8001d18:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fd0c 	bl	8002740 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <HAL_TIM_IC_Stop_IT+0x12c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	d10d      	bne.n	8001d50 <HAL_TIM_IC_Stop_IT+0xb0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_TIM_IC_Stop_IT+0x130>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d107      	bne.n	8001d50 <HAL_TIM_IC_Stop_IT+0xb0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d104      	bne.n	8001d60 <HAL_TIM_IC_Stop_IT+0xc0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	223e      	movs	r2, #62	; 0x3e
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]
 8001d5e:	e013      	b.n	8001d88 <HAL_TIM_IC_Stop_IT+0xe8>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d104      	bne.n	8001d70 <HAL_TIM_IC_Stop_IT+0xd0>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	223f      	movs	r2, #63	; 0x3f
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	e00b      	b.n	8001d88 <HAL_TIM_IC_Stop_IT+0xe8>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d104      	bne.n	8001d80 <HAL_TIM_IC_Stop_IT+0xe0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	e003      	b.n	8001d88 <HAL_TIM_IC_Stop_IT+0xe8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2241      	movs	r2, #65	; 0x41
 8001d84:	2101      	movs	r1, #1
 8001d86:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d104      	bne.n	8001d98 <HAL_TIM_IC_Stop_IT+0xf8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2242      	movs	r2, #66	; 0x42
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
 8001d96:	e013      	b.n	8001dc0 <HAL_TIM_IC_Stop_IT+0x120>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d104      	bne.n	8001da8 <HAL_TIM_IC_Stop_IT+0x108>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2243      	movs	r2, #67	; 0x43
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	e00b      	b.n	8001dc0 <HAL_TIM_IC_Stop_IT+0x120>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d104      	bne.n	8001db8 <HAL_TIM_IC_Stop_IT+0x118>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2244      	movs	r2, #68	; 0x44
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]
 8001db6:	e003      	b.n	8001dc0 <HAL_TIM_IC_Stop_IT+0x120>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2245      	movs	r2, #69	; 0x45
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	00001111 	.word	0x00001111
 8001dd0:	00000444 	.word	0x00000444

08001dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d124      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d11d      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4252      	negs	r2, r2
 8001e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	4013      	ands	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7fe faec 	bl	80003f4 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e007      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 fa55 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fa59 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d125      	bne.n	8001e8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d11e      	bne.n	8001e8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2205      	movs	r2, #5
 8001e56:	4252      	negs	r2, r2
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	23c0      	movs	r3, #192	; 0xc0
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fabf 	bl	80003f4 <HAL_TIM_IC_CaptureCallback>
 8001e76:	e007      	b.n	8001e88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 fa28 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 fa2c 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2208      	movs	r2, #8
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d124      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d11d      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2209      	movs	r2, #9
 8001eb0:	4252      	negs	r2, r2
 8001eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7fe fa93 	bl	80003f4 <HAL_TIM_IC_CaptureCallback>
 8001ece:	e007      	b.n	8001ee0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f9fc 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 fa00 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2210      	movs	r2, #16
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d125      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2210      	movs	r2, #16
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d11e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2211      	movs	r2, #17
 8001f08:	4252      	negs	r2, r2
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	23c0      	movs	r3, #192	; 0xc0
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe fa66 	bl	80003f4 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e007      	b.n	8001f3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 f9cf 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 f9d3 	bl	80022e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10f      	bne.n	8001f6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4252      	negs	r2, r2
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 f9a9 	bl	80022c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d10f      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	d108      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2281      	movs	r2, #129	; 0x81
 8001f90:	4252      	negs	r2, r2
 8001f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fc50 	bl	800283c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d10f      	bne.n	8001fca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d108      	bne.n	8001fca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f993 	bl	80022f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d10f      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d108      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2221      	movs	r2, #33	; 0x21
 8001fec:	4252      	negs	r2, r2
 8001fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fc1a 	bl	800282c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	223c      	movs	r2, #60	; 0x3c
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e082      	b.n	8002120 <HAL_TIM_IC_ConfigChannel+0x120>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	223c      	movs	r2, #60	; 0x3c
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f000 f9ce 	bl	80023d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	210c      	movs	r1, #12
 8002048:	438a      	bics	r2, r1
 800204a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6999      	ldr	r1, [r3, #24]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	619a      	str	r2, [r3, #24]
 800205e:	e05a      	b.n	8002116 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d11c      	bne.n	80020a0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f000 fa2f 	bl	80024d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4928      	ldr	r1, [pc, #160]	; (8002128 <HAL_TIM_IC_ConfigChannel+0x128>)
 8002086:	400a      	ands	r2, r1
 8002088:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6999      	ldr	r1, [r3, #24]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	021a      	lsls	r2, r3, #8
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	619a      	str	r2, [r3, #24]
 800209e:	e03a      	b.n	8002116 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11b      	bne.n	80020de <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f000 fa83 	bl	80025c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	210c      	movs	r1, #12
 80020c6:	438a      	bics	r2, r1
 80020c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69d9      	ldr	r1, [r3, #28]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	e01b      	b.n	8002116 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f000 faa7 	bl	8002640 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	490a      	ldr	r1, [pc, #40]	; (8002128 <HAL_TIM_IC_ConfigChannel+0x128>)
 80020fe:	400a      	ands	r2, r1
 8002100:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69d9      	ldr	r1, [r3, #28]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	021a      	lsls	r2, r3, #8
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	223c      	movs	r2, #60	; 0x3c
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}
 8002128:	fffff3ff 	.word	0xfffff3ff

0800212c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223c      	movs	r2, #60	; 0x3c
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_TIM_ConfigClockSource+0x18>
 8002140:	2302      	movs	r3, #2
 8002142:	e0b7      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x188>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	223c      	movs	r2, #60	; 0x3c
 8002148:	2101      	movs	r1, #1
 800214a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	223d      	movs	r2, #61	; 0x3d
 8002150:	2102      	movs	r1, #2
 8002152:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2277      	movs	r2, #119	; 0x77
 8002160:	4393      	bics	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a55      	ldr	r2, [pc, #340]	; (80022bc <HAL_TIM_ConfigClockSource+0x190>)
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0192      	lsls	r2, r2, #6
 800217c:	4293      	cmp	r3, r2
 800217e:	d040      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xd6>
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	0192      	lsls	r2, r2, #6
 8002184:	4293      	cmp	r3, r2
 8002186:	d900      	bls.n	800218a <HAL_TIM_ConfigClockSource+0x5e>
 8002188:	e088      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0152      	lsls	r2, r2, #5
 800218e:	4293      	cmp	r3, r2
 8002190:	d100      	bne.n	8002194 <HAL_TIM_ConfigClockSource+0x68>
 8002192:	e085      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	0152      	lsls	r2, r2, #5
 8002198:	4293      	cmp	r3, r2
 800219a:	d900      	bls.n	800219e <HAL_TIM_ConfigClockSource+0x72>
 800219c:	e07e      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 800219e:	2b70      	cmp	r3, #112	; 0x70
 80021a0:	d018      	beq.n	80021d4 <HAL_TIM_ConfigClockSource+0xa8>
 80021a2:	d900      	bls.n	80021a6 <HAL_TIM_ConfigClockSource+0x7a>
 80021a4:	e07a      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 80021a6:	2b60      	cmp	r3, #96	; 0x60
 80021a8:	d04f      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x11e>
 80021aa:	d900      	bls.n	80021ae <HAL_TIM_ConfigClockSource+0x82>
 80021ac:	e076      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 80021ae:	2b50      	cmp	r3, #80	; 0x50
 80021b0:	d03b      	beq.n	800222a <HAL_TIM_ConfigClockSource+0xfe>
 80021b2:	d900      	bls.n	80021b6 <HAL_TIM_ConfigClockSource+0x8a>
 80021b4:	e072      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d057      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x13e>
 80021ba:	d900      	bls.n	80021be <HAL_TIM_ConfigClockSource+0x92>
 80021bc:	e06e      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 80021be:	2b30      	cmp	r3, #48	; 0x30
 80021c0:	d063      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x15e>
 80021c2:	d86b      	bhi.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d060      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x15e>
 80021c8:	d868      	bhi.n	800229c <HAL_TIM_ConfigClockSource+0x170>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d05d      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x15e>
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d05b      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021d2:	e063      	b.n	800229c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f000 fa8c 	bl	8002700 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2277      	movs	r2, #119	; 0x77
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
      break;
 8002200:	e04f      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f000 fa75 	bl	8002700 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	01c9      	lsls	r1, r1, #7
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
      break;
 8002228:	e03b      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	001a      	movs	r2, r3
 8002238:	f000 f920 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2150      	movs	r1, #80	; 0x50
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fa42 	bl	80026cc <TIM_ITRx_SetConfig>
      break;
 8002248:	e02b      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	001a      	movs	r2, r3
 8002258:	f000 f980 	bl	800255c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2160      	movs	r1, #96	; 0x60
 8002262:	0018      	movs	r0, r3
 8002264:	f000 fa32 	bl	80026cc <TIM_ITRx_SetConfig>
      break;
 8002268:	e01b      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	001a      	movs	r2, r3
 8002278:	f000 f900 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	0018      	movs	r0, r3
 8002284:	f000 fa22 	bl	80026cc <TIM_ITRx_SetConfig>
      break;
 8002288:	e00b      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0019      	movs	r1, r3
 8002294:	0010      	movs	r0, r2
 8002296:	f000 fa19 	bl	80026cc <TIM_ITRx_SetConfig>
        break;
 800229a:	e002      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	e000      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80022a0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	223d      	movs	r2, #61	; 0x3d
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	223c      	movs	r2, #60	; 0x3c
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b004      	add	sp, #16
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	ffff00ff 	.word	0xffff00ff

080022c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <TIM_Base_SetConfig+0xc0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0x20>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <TIM_Base_SetConfig+0xc4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2270      	movs	r2, #112	; 0x70
 8002324:	4393      	bics	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <TIM_Base_SetConfig+0xc0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00f      	beq.n	800235a <TIM_Base_SetConfig+0x5a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <TIM_Base_SetConfig+0xc4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00b      	beq.n	800235a <TIM_Base_SetConfig+0x5a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <TIM_Base_SetConfig+0xc8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0x5a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <TIM_Base_SetConfig+0xcc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0x5a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <TIM_Base_SetConfig+0xd0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <TIM_Base_SetConfig+0xd4>)
 800235e:	4013      	ands	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	4393      	bics	r3, r2
 8002372:	001a      	movs	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <TIM_Base_SetConfig+0xc0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <TIM_Base_SetConfig+0xaa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <TIM_Base_SetConfig+0xcc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <TIM_Base_SetConfig+0xaa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <TIM_Base_SetConfig+0xd0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d103      	bne.n	80023b2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	615a      	str	r2, [r3, #20]
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b004      	add	sp, #16
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40002000 	.word	0x40002000
 80023cc:	40014400 	.word	0x40014400
 80023d0:	40014800 	.word	0x40014800
 80023d4:	fffffcff 	.word	0xfffffcff

080023d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4393      	bics	r3, r2
 80023ee:	001a      	movs	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <TIM_TI1_SetConfig+0x9c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_TI1_SetConfig+0x38>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <TIM_TI1_SetConfig+0xa0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <TIM_TI1_SetConfig+0x3c>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <TIM_TI1_SetConfig+0x3e>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2203      	movs	r2, #3
 800241e:	4393      	bics	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e003      	b.n	8002434 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2201      	movs	r2, #1
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	22f0      	movs	r2, #240	; 0xf0
 8002438:	4393      	bics	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	22ff      	movs	r2, #255	; 0xff
 8002442:	4013      	ands	r3, r2
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	220a      	movs	r2, #10
 800244e:	4393      	bics	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	220a      	movs	r2, #10
 8002456:	4013      	ands	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	621a      	str	r2, [r3, #32]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b006      	add	sp, #24
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400

0800247c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	2201      	movs	r2, #1
 8002494:	4393      	bics	r3, r2
 8002496:	001a      	movs	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	22f0      	movs	r2, #240	; 0xf0
 80024a6:	4393      	bics	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	220a      	movs	r2, #10
 80024b8:	4393      	bics	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b006      	add	sp, #24
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2210      	movs	r2, #16
 80024ec:	4393      	bics	r3, r2
 80024ee:	001a      	movs	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4a14      	ldr	r2, [pc, #80]	; (8002554 <TIM_TI2_SetConfig+0x7c>)
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4a10      	ldr	r2, [pc, #64]	; (8002558 <TIM_TI2_SetConfig+0x80>)
 8002516:	4013      	ands	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	031b      	lsls	r3, r3, #12
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	22a0      	movs	r2, #160	; 0xa0
 800252c:	4393      	bics	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	22a0      	movs	r2, #160	; 0xa0
 8002536:	4013      	ands	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b006      	add	sp, #24
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	fffffcff 	.word	0xfffffcff
 8002558:	ffff0fff 	.word	0xffff0fff

0800255c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	2210      	movs	r2, #16
 800256e:	4393      	bics	r3, r2
 8002570:	001a      	movs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <TIM_TI2_ConfigInputStage+0x60>)
 8002586:	4013      	ands	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	031b      	lsls	r3, r3, #12
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	22a0      	movs	r2, #160	; 0xa0
 8002598:	4393      	bics	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b006      	add	sp, #24
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	ffff0fff 	.word	0xffff0fff

080025c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <TIM_TI3_SetConfig+0x78>)
 80025d4:	401a      	ands	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2203      	movs	r2, #3
 80025ea:	4393      	bics	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	22f0      	movs	r2, #240	; 0xf0
 80025fa:	4393      	bics	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	4013      	ands	r3, r2
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <TIM_TI3_SetConfig+0x7c>)
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	021a      	lsls	r2, r3, #8
 8002618:	23a0      	movs	r3, #160	; 0xa0
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	4013      	ands	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	621a      	str	r2, [r3, #32]
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b006      	add	sp, #24
 8002636:	bd80      	pop	{r7, pc}
 8002638:	fffffeff 	.word	0xfffffeff
 800263c:	fffff5ff 	.word	0xfffff5ff

08002640 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <TIM_TI4_SetConfig+0x7c>)
 8002654:	401a      	ands	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <TIM_TI4_SetConfig+0x80>)
 800266a:	4013      	ands	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <TIM_TI4_SetConfig+0x84>)
 800267c:	4013      	ands	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	031b      	lsls	r3, r3, #12
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <TIM_TI4_SetConfig+0x88>)
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	031a      	lsls	r2, r3, #12
 800269a:	23a0      	movs	r3, #160	; 0xa0
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4013      	ands	r3, r2
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b006      	add	sp, #24
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	ffffefff 	.word	0xffffefff
 80026c0:	fffffcff 	.word	0xfffffcff
 80026c4:	ffff0fff 	.word	0xffff0fff
 80026c8:	ffff5fff 	.word	0xffff5fff

080026cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2270      	movs	r2, #112	; 0x70
 80026e0:	4393      	bics	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	2207      	movs	r2, #7
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	609a      	str	r2, [r3, #8]
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b004      	add	sp, #16
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <TIM_ETR_SetConfig+0x3c>)
 8002718:	4013      	ands	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	021a      	lsls	r2, r3, #8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	431a      	orrs	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b006      	add	sp, #24
 800273a:	bd80      	pop	{r7, pc}
 800273c:	ffff00ff 	.word	0xffff00ff

08002740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	221f      	movs	r2, #31
 8002750:	4013      	ands	r3, r2
 8002752:	2201      	movs	r2, #1
 8002754:	409a      	lsls	r2, r3
 8002756:	0013      	movs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	43d2      	mvns	r2, r2
 8002762:	401a      	ands	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	211f      	movs	r1, #31
 8002770:	400b      	ands	r3, r1
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4099      	lsls	r1, r3
 8002776:	000b      	movs	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b006      	add	sp, #24
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	223c      	movs	r2, #60	; 0x3c
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800279c:	2302      	movs	r3, #2
 800279e:	e03c      	b.n	800281a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223c      	movs	r2, #60	; 0x3c
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	223d      	movs	r2, #61	; 0x3d
 80027ac:	2102      	movs	r1, #2
 80027ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2270      	movs	r2, #112	; 0x70
 80027c4:	4393      	bics	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10c      	bne.n	8002808 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	4393      	bics	r3, r2
 80027f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223d      	movs	r2, #61	; 0x3d
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223c      	movs	r2, #60	; 0x3c
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400

0800282c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2600      	movs	r6, #0
 8002850:	4d0c      	ldr	r5, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1b64      	subs	r4, r4, r5
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a6      	cmp	r6, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	2600      	movs	r6, #0
 800285e:	f000 f82b 	bl	80028b8 <_init>
 8002862:	4d0a      	ldr	r5, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a6      	cmp	r6, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	00b3      	lsls	r3, r6, #2
 8002872:	58eb      	ldr	r3, [r5, r3]
 8002874:	4798      	blx	r3
 8002876:	3601      	adds	r6, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	00b3      	lsls	r3, r6, #2
 800287c:	58eb      	ldr	r3, [r5, r3]
 800287e:	4798      	blx	r3
 8002880:	3601      	adds	r6, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	08002900 	.word	0x08002900
 8002888:	08002900 	.word	0x08002900
 800288c:	08002900 	.word	0x08002900
 8002890:	08002904 	.word	0x08002904

08002894 <memcpy>:
 8002894:	2300      	movs	r3, #0
 8002896:	b510      	push	{r4, lr}
 8002898:	429a      	cmp	r2, r3
 800289a:	d100      	bne.n	800289e <memcpy+0xa>
 800289c:	bd10      	pop	{r4, pc}
 800289e:	5ccc      	ldrb	r4, [r1, r3]
 80028a0:	54c4      	strb	r4, [r0, r3]
 80028a2:	3301      	adds	r3, #1
 80028a4:	e7f8      	b.n	8002898 <memcpy+0x4>

080028a6 <memset>:
 80028a6:	0003      	movs	r3, r0
 80028a8:	1882      	adds	r2, r0, r2
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d100      	bne.n	80028b0 <memset+0xa>
 80028ae:	4770      	bx	lr
 80028b0:	7019      	strb	r1, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	e7f9      	b.n	80028aa <memset+0x4>
	...

080028b8 <_init>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr

080028c4 <_fini>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr
